# === Aiogram v3 + FastAPI (guided flow) ===
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Update, Message, BufferedInputFile, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.filters import CommandStart, Command

# FSM
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext

bot = Bot(TELEGRAM_BOT_TOKEN)
dp  = Dispatcher(storage=MemoryStorage())
rt  = Router()
dp.include_router(rt)

MIN_TEXT_CHARS = int(os.getenv("MIN_TEXT_CHARS", 120))

HELP = (
    "–Ø ‚Äî –ù–µ–π—Ä–æ-–∫–æ–Ω—Ç—Ä–æ–ª—ë—Ä –∫–∞—á–µ—Å—Ç–≤–∞.\n"
    "–®–∞–≥–∏:\n"
    "1) –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç (—Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª)\n"
    "2) –ü—Ä–∏—à–ª–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª\n"
    "3) –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ ‚Äî –∏ —è –ø—Ä–∏—à–ª—é –æ—Ç—á—ë—Ç (Markdown/DOCX/PDF)\n\n"
    "–ö–æ–º–∞–Ω–¥—ã:\n"
    "/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
    "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n"
    "/cancel ‚Äî –æ—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞"
)

class Flow(StatesGroup):
    menu       = State()  # –ø–æ–∫–∞–∑ –º–µ–Ω—é
    waiting_text = State()
    waiting_file = State()
    confirm      = State()  # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º

def kb_main_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî§ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="flow:text")],
        [InlineKeyboardButton(text="üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ/—Ñ–∞–π–ª", callback_data="flow:file")],
    ])

def kb_confirm() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="flow:go")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞",        callback_data="flow:cancel")],
    ])

def kb_cancel() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="flow:cancel")],
    ])

# -------- –ö–æ–º–∞–Ω–¥—ã --------
@rt.message(CommandStart())
async def on_start(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(Flow.menu)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª –∫ –∞–Ω–∞–ª–∏–∑—É.\n–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ:",
        reply_markup=kb_main_menu()
    )

@rt.message(Command("help"))
async def on_help(message: Message):
    await message.answer(HELP, reply_markup=kb_main_menu())

@rt.message(Command("cancel"))
async def on_cancel_cmd(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(Flow.menu)
    await message.answer("–û–∫, –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kb_main_menu())

# -------- –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–Ω—é --------
@rt.callback_query(F.data == "flow:text")
async def cb_flow_text(cb: CallbackQuery, state: FSMContext):
    await state.set_state(Flow.waiting_text)
    await cb.message.edit_text(
        f"–ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç (—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç/–¥–∏–∞–ª–æ–≥). –ú–∏–Ω–∏–º—É–º {MIN_TEXT_CHARS} —Å–∏–º–≤–æ–ª–æ–≤.\n"
        "–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ ‚Äî —è –ø–æ–ø—Ä–æ—à—É –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–Ω–∞–ª–∏–∑.",
        reply_markup=kb_cancel()
    )
    await cb.answer()

@rt.callback_query(F.data == "flow:file")
async def cb_flow_file(cb: CallbackQuery, state: FSMContext):
    await state.set_state(Flow.waiting_file)
    await cb.message.edit_text(
        "–ü—Ä–∏—à–ª–∏ —Ñ–∞–π–ª: üéß –∞—É–¥–∏–æ / üé• –≤–∏–¥–µ–æ / üìÑ –¥–æ–∫—É–º–µ–Ω—Ç (txt/md/csv/rtf).\n"
        "–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ø—Ä–æ—à—É –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–Ω–∞–ª–∏–∑.",
        reply_markup=kb_cancel()
    )
    await cb.answer()

@rt.callback_query(F.data == "flow:cancel")
async def cb_flow_cancel(cb: CallbackQuery, state: FSMContext):
    await state.clear()
    await state.set_state(Flow.menu)
    await cb.message.edit_text("–û—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:", reply_markup=kb_main_menu())
    await cb.answer()

# -------- –ü—Ä–∏—ë–º —Ç–µ–∫—Å—Ç–∞ --------
@rt.message(Flow.waiting_text, F.text)
async def on_text_in_state(message: Message, state: FSMContext):
    txt = (message.text or "").strip()
    if len(txt) < MIN_TEXT_CHARS:
        await message.answer(
            f"–¢–µ–∫—Å—Ç–∞ –º–∞–ª–æ–≤–∞—Ç–æ ({len(txt)} —Å–∏–º–≤.). –ü—Ä–∏—à–ª–∏ ‚â• {MIN_TEXT_CHARS} —Å–∏–º–≤–æ–ª–æ–≤ "
            "–∏–ª–∏ –≤–µ—Ä–Ω–∏—Å—å –≤ –º–µ–Ω—é —á–µ—Ä–µ–∑ /cancel.",
            reply_markup=kb_cancel()
        )
        return
    await state.update_data(src_type="text", text=txt, src_name="text.txt")
    await state.set_state(Flow.confirm)
    await message.answer(
        "–ü—Ä–∏–Ω—è—Ç–æ ‚úÖ\n–ù–∞–∂–º–∏ ¬´–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑¬ª, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É.",
        reply_markup=kb_confirm()
    )

# -------- –ü—Ä–∏—ë–º —Ñ–∞–π–ª–æ–≤ --------
async def _accept_media_and_ask_confirm(path: Path, message: Message, state: FSMContext, orig_name: str):
    await state.update_data(src_type="file", file_path=str(path), src_name=orig_name)
    await state.set_state(Flow.confirm)
    await message.answer(
        f"–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω: *{orig_name}*.\n–ù–∞–∂–º–∏ ¬´–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑¬ª, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É.",
        reply_markup=kb_confirm(),
        parse_mode="Markdown"
    )

@rt.message(Flow.waiting_file, F.voice | F.audio)
async def on_audio(message: Message, state: FSMContext):
    try:
        file = message.audio or message.voice
        fname = (file.file_name if message.audio else "voice.ogg") or "audio.ogg"
        dst = INBOX / safe_filename(fname)
        await bot.download(file, destination=dst)
        await _accept_media_and_ask_confirm(dst, message, state, orig_name=fname)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –∞—É–¥–∏–æ: {e}", reply_markup=kb_cancel())

@rt.message(Flow.waiting_file, F.video | F.video_note)
async def on_video(message: Message, state: FSMContext):
    try:
        file = message.video or message.video_note
        fname = (message.video.file_name if message.video else "video_note.mp4") or "video.mp4"
        dst = INBOX / safe_filename(fname)
        await bot.download(file, destination=dst)
        await _accept_media_and_ask_confirm(dst, message, state, orig_name=fname)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –≤–∏–¥–µ–æ: {e}", reply_markup=kb_cancel())

@rt.message(Flow.waiting_file, F.document)
async def on_document(message: Message, state: FSMContext):
    try:
        doc = message.document
        fname = safe_filename(doc.file_name or f"file_{doc.file_unique_id}")
        dst = INBOX / fname
        await bot.download(doc, destination=dst)
        # –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π –¥–æ–∫—É–º–µ–Ω—Ç ‚Äî –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ/—Ç–µ–∫—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–∏–º –¥–∞–ª—å—à–µ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ
        await _accept_media_and_ask_confirm(dst, message, state, orig_name=fname)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}", reply_markup=kb_cancel())

# -------- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ --------
@rt.callback_query(Flow.confirm, F.data == "flow:go")
async def cb_go_analyze(cb: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    src_type = data.get("src_type")
    src_name = data.get("src_name") or "source"
    await cb.message.edit_text("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞—á–µ—Å—Ç–≤–æ...")

    try:
        if src_type == "text":
            text = data.get("text", "")
            await handle_text_and_reply(text, cb.message, src_name=src_name)
        elif src_type == "file":
            path = Path(data.get("file_path"))
            # –æ–ø—Ä–µ–¥–µ–ª–∏–º —Ç–∏–ø: –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç ‚Äî —á–∏—Ç–∞–µ–º; –∏–Ω–∞—á–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏–º –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
            if is_text(path.name):
                text = read_text_file(path)
                await handle_text_and_reply(text, cb.message, src_name=src_name)
            else:
                await process_media_file(path, cb.message, orig_name=src_name)
        else:
            await cb.message.answer("–ù–µ –ø–æ–Ω—è–ª —Ç–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–∑ –º–µ–Ω—é.", reply_markup=kb_main_menu())
            await state.clear()
            return
        await state.clear()
        await state.set_state(Flow.menu)
    except Exception as e:
        await cb.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}", reply_markup=kb_main_menu())
        await state.clear()
        await state.set_state(Flow.menu)

    await cb.answer()

# -------- –¢–µ–∫—Å—Ç –≤–Ω–µ –ø–æ—Ç–æ–∫–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é, –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ä–∞–∑—É --------
@rt.message(F.text)
async def on_text_default(message: Message, state: FSMContext):
    s = await state.get_state()
    if s in {Flow.waiting_text.state, Flow.waiting_file.state, Flow.confirm.state}:
        # —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ ‚Äî —Ö–µ–Ω–¥–ª–µ—Ä—ã –≤—ã—à–µ —Ä–∞–∑—Ä—É–ª—è—Ç
        return
    await state.set_state(Flow.menu)
    await message.answer(
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ –±—É–¥–µ–º –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å:",
        reply_markup=kb_main_menu()
    )

# === FastAPI app + webhook ===
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import PlainTextResponse, JSONResponse

app = FastAPI()

@app.get("/", response_class=PlainTextResponse)
async def root():
    return "OK: neuro-qc-bot webhook"

def build_webhook_url() -> str:
    base = PUBLIC_BASE_URL or RENDER_EXTERNAL_URL
    if not base:
        raise RuntimeError("No PUBLIC_BASE_URL or RENDER_EXTERNAL_URL provided by Render.")
    base = base.rstrip("/")
    return f"{base}/webhook/{TELEGRAM_WEBHOOK_SECRET}"

@app.on_event("startup")
async def on_startup():
    url = build_webhook_url()
    await bot.set_webhook(
        url,
        secret_token=TELEGRAM_WEBHOOK_SECRET,
        drop_pending_updates=True,
        allowed_updates=["message","edited_message","callback_query"]
    )
    print("Webhook set:", url)

@app.on_event("shutdown")
async def on_shutdown():
    try:
        await bot.delete_webhook(drop_pending_updates=False)
    except Exception:
        pass

@app.post("/webhook/{secret}")
async def telegram_webhook(secret: str, request: Request):
    if secret != TELEGRAM_WEBHOOK_SECRET:
        raise HTTPException(status_code=403, detail="forbidden")
    data = await request.json()
    try:
        update = Update.model_validate(data)
    except Exception:
        raise HTTPException(status_code=400, detail="bad update")
    await dp.feed_update(bot, update)
    return JSONResponse({"ok": True})
